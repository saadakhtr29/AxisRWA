generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  investor
  partner
  admin
  listener
}

model User {
  id        String   @id @default(uuid())
  uid       String   @unique
  email     String   @unique
  role      Role     @default(investor)
  wallet    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assets     Asset[]          @relation("PartnerAssets")
  ownerships OwnershipToken[]
  roiTokens  RoiToken[] // âœ… Added
}

model Asset {
  id          String   @id @default(uuid())
  partnerID   String
  title       String
  valuation   Float
  tokenSupply Int
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  partner        User             @relation("PartnerAssets", fields: [partnerID], references: [uid])
  ownerships     OwnershipToken[]
  roiTokens      RoiToken[]
  revenueReports RevenueReport[]
}

model OwnershipToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String
  quantity  Int
  txHash    String   @unique
  createdAt DateTime @default(now())
}

model RoiToken {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  asset         Asset    @relation(fields: [assetId], references: [id])
  assetId       String
  amount        Float
  distributedAt DateTime
}

model RevenueReport {
  id            String   @id @default(uuid())
  asset         Asset    @relation(fields: [assetId], references: [id])
  assetId       String
  uploadedBy    String
  revenueAmount Float
  period        String
  createdAt     DateTime @default(now())
}
